"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationManage = void 0;
const Errors = require("./errors");
const node_fetch_1 = require("node-fetch");
class NotificationManage {
    constructor(baseUrl, options) {
        this.initComplete = false;
        baseUrl = baseUrl.slice(-1) === "/" ? baseUrl.slice(0, -1) : baseUrl;
        if (!this.isUrl(baseUrl))
            throw new Errors.ArgumentError("baseUrl is invalid.");
        this.baseUrl = baseUrl;
        this.authorizationToken = options.authorizationToken;
    }
    getBaseUrl() {
        return this.baseUrl;
    }
    setAuthorizationToken(authorizationToken) {
        this.authorizationToken = authorizationToken;
    }
    configureForOverrideCustomer(customerID) {
        this.customerID = customerID;
    }
    clearOverrideCustomer() {
        this.customerID = undefined;
        this.initComplete = false;
    }
    async getInfo() {
        const uri = "/manage/info";
        return await this.executeRequest(uri, "GET", "get-info");
    }
    async generateApiKey() {
        let uri = "/manage/apikey";
        return await this.executeRequest(uri, "POST", "create-apikey");
    }
    async getMessages(pageSize, nextPageID) {
        let uri = "/manage/customer/{{customerID}}/messages";
        return await this.executeRequest(uri, "GET", "list-message", undefined, {
            pagesize: pageSize,
            nextpage: nextPageID,
        });
    }
    async getMessage(messageID) {
        const uri = `/manage/customer/{{customerID}}/message/${encodeURIComponent(messageID)}`;
        return await this.executeRequest(uri, "GET", "get-message");
    }
    async createEmailMessage(emailMessage, test) {
        const uri = "/manage/customer/{{customerID}}/message";
        const contentType = test ? "create-test-email-message" : "create-email-message";
        return await this.executeRequest(uri, "POST", contentType, emailMessage);
    }
    async createSmsMessage(smsMessage, test) {
        const uri = "/manage/customer/{{customerID}}/message";
        const contentType = test ? "create-test-sms-message" : "create-sms-message";
        return await this.executeRequest(uri, "POST", contentType, smsMessage);
    }
    async getCustomers(pageSize, nextPageID) {
        let uri = "/manage/customers";
        return await this.executeRequest(uri, "GET", "list-customer", undefined, {
            pagesize: pageSize,
            nextpage: nextPageID,
        });
    }
    async getCustomer(customerID) {
        let uri = "/manage/customer";
        if (customerID != undefined) {
            uri += "/" + encodeURIComponent(customerID);
        }
        return await this.executeRequest(uri, "GET", "get-customer");
    }
    async createCustomer(customer) {
        let uri = "/manage/customer";
        return await this.executeRequest(uri, "POST", "create-customer", customer);
    }
    async updateCustomer(customerID, customer) {
        let uri = `/manage/customer/${encodeURIComponent(customerID)}`;
        return await this.executeRequest(uri, "PATCH", "update-customer", customer);
    }
    async deleteCustomer(customerID) {
        let uri = `/manage/customer/${encodeURIComponent(customerID)}`;
        return await this.executeRequest(uri, "DELETE", "delete-customer");
    }
    async getTemplates(pageSize, nextPageID) {
        const uri = "/manage/customer/{{customerID}}/templates";
        return await this.executeRequest(uri, "GET", "list-template", undefined, {
            pagesize: pageSize,
            nextpage: nextPageID,
        });
    }
    async getTemplate(slug, locale) {
        let uri = `/manage/customer/{{customerID}}/template/${encodeURIComponent(slug)}`;
        if (locale) {
            uri += "/" + encodeURIComponent(locale);
        }
        return await this.executeRequest(uri, "GET", "get-template");
    }
    async createTemplate(template) {
        const uri = "/manage/customer/{{customerID}}/template";
        return await this.executeRequest(uri, "POST", "create-template", template);
    }
    async updateTemplate(slug, locale, template) {
        let uri = `/manage/customer/{{customerID}}/template/${encodeURIComponent(slug)}`;
        if (locale) {
            uri += "/" + encodeURIComponent(locale);
        }
        return await this.executeRequest(uri, "PATCH", "update-template", template);
    }
    async deleteTemplate(slug, locale) {
        let uri = `/manage/customer/{{customerID}}/template/${encodeURIComponent(slug)}`;
        if (locale) {
            uri += "/" + encodeURIComponent(locale);
        }
        return await this.executeRequest(uri, "DELETE", "delete-template");
    }
    async getSenders(pageSize, nextPageID) {
        const uri = "/manage/customer/{{customerID}}/senders";
        return await this.executeRequest(uri, "GET", "list-sender", undefined, {
            pagesize: pageSize,
            nextpage: nextPageID,
        });
    }
    async getSender(senderID) {
        const uri = `/manage/customer/{{customerID}}/sender/${encodeURIComponent(senderID)}`;
        return await this.executeRequest(uri, "GET", "get-sender");
    }
    async createSender(sender) {
        const uri = "/manage/customer/{{customerID}}/sender";
        return await this.executeRequest(uri, "POST", "create-sender", sender);
    }
    async updateSender(senderID, sender) {
        const uri = `/manage/customer/{{customerID}}/sender/${encodeURIComponent(senderID)}`;
        return await this.executeRequest(uri, "PATCH", "update-sender", sender);
    }
    async deleteSender(senderID) {
        const uri = `/manage/customer/{{customerID}}/sender/${encodeURIComponent(senderID)}`;
        return await this.executeRequest(uri, "DELETE", "delete-sender");
    }
    async getAppKeys(pageSize, nextPageID) {
        const uri = "/manage/customer/{{customerID}}/appkeys";
        return await this.executeRequest(uri, "GET", "list-appkey", undefined, {
            pagesize: pageSize,
            nextpage: nextPageID,
        });
    }
    async getAppKey(appKeyID) {
        const uri = `/manage/customer/{{customerID}}/appkey/${encodeURIComponent(appKeyID)}`;
        return await this.executeRequest(uri, "GET", "get-appkey");
    }
    async createAppKey(appKey) {
        const uri = "/manage/customer/{{customerID}}/appkey";
        return await this.executeRequest(uri, "POST", "create-appkey", appKey);
    }
    async updateAppKey(appKeyID, appKey) {
        const uri = `/manage/customer/{{customerID}}/appkey/${encodeURIComponent(appKeyID)}`;
        return await this.executeRequest(uri, "PATCH", "update-appkey", appKey);
    }
    async deleteAppKey(appKeyID) {
        const uri = `/manage/customer/{{customerID}}/appkey/${encodeURIComponent(appKeyID)}`;
        return await this.executeRequest(uri, "DELETE", "delete-appkey");
    }
    async getBlocks(pageSize, nextPageID) {
        const uri = "/manage/customer/{{customerID}}/blocks";
        return await this.executeRequest(uri, "GET", "list-block", undefined, {
            pagesize: pageSize,
            nextpage: nextPageID,
        });
    }
    async getBlock(blockID) {
        const uri = `/manage/customer/{{customerID}}/block/${encodeURIComponent(blockID)}`;
        return await this.executeRequest(uri, "GET", "get-block");
    }
    async createBlock(block) {
        const uri = "/manage/customer/{{customerID}}/block";
        return await this.executeRequest(uri, "POST", "create-block", block);
    }
    async deleteBlock(blockID) {
        const uri = `/manage/customer/{{customerID}}/block/${encodeURIComponent(blockID)}`;
        await this.executeRequest(uri, "DELETE", "delete-block");
    }
    async executeRequest(uri, method, contentTypeResource, requestBody, queryParameters) {
        await this.initClient();
        uri = uri.replace(/{{customerID}}/, encodeURIComponent(this.customerID));
        let qp = "";
        if (queryParameters) {
            for (const [k, v] of Object.entries(queryParameters)) {
                if (v === undefined || v === null) {
                    delete queryParameters[k];
                }
            }
            qp = "?" + new URLSearchParams(queryParameters);
        }
        let requestData = undefined;
        if (requestBody) {
            requestData = (typeof requestBody === "string") ? requestBody : JSON.stringify(requestBody);
        }
        let responseBodyText = undefined;
        let responseBody = undefined;
        let response;
        try {
            response = await (0, node_fetch_1.default)(this.baseUrl + uri + qp, {
                method,
                headers: {
                    "Content-Type": `application/vnd.notification.${contentTypeResource}.v1+json`,
                    "Authorization": this.authorizationToken,
                },
                body: requestData,
            });
            responseBodyText = await response.text();
        }
        catch (ex) {
            throw new Errors.FetchError(ex.message, { cause: ex });
        }
        if (!response) {
            throw new Errors.ResponseError("Server did not respond");
        }
        if (response.status === 401 || response.status === 403) {
            throw new Errors.AuthorizationError("Authorization Failed");
        }
        else if (response.status === 404) {
            throw new Errors.ResponseError("Resource not found");
        }
        try {
            responseBody = responseBodyText && JSON.parse(responseBodyText);
        }
        catch (ex) {
            throw new Errors.ResponseError("Invalid response content", { cause: responseBodyText });
        }
        if (response.status != 200) {
            throw new Errors.ResponseError(responseBody.Error || responseBodyText);
        }
        return responseBody;
    }
    async initClient() {
        if (this.initComplete)
            return;
        this.initComplete = true;
        try {
            const dataItem = await this.getInfo();
            this.customerID = dataItem.CustomerID;
        }
        catch (ex) {
            this.initComplete = false;
            const error = ex;
            if (error instanceof Errors.AuthorizationError)
                throw error;
            else
                throw new Errors.InitError(`Failed to init client: ${error.message}`, { cause: error });
        }
    }
    isUrl(value) {
        try {
            const url = new URL(value);
            return url.protocol === "http:" || url.protocol === "https:";
        }
        catch { }
        return false;
    }
}
exports.NotificationManage = NotificationManage;
//# sourceMappingURL=data:application/json;base64,